// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/enum"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/aki-13627/animalia/backend-go/ent/tasktype"
	pgvector "github.com/pgvector/pgvector-go"
)

// TaskTypeUpdate is the builder for updating TaskType entities.
type TaskTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TaskTypeMutation
}

// Where appends a list predicates to the TaskTypeUpdate builder.
func (ttu *TaskTypeUpdate) Where(ps ...predicate.TaskType) *TaskTypeUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetType sets the "type" field.
func (ttu *TaskTypeUpdate) SetType(et enum.TaskType) *TaskTypeUpdate {
	ttu.mutation.SetType(et)
	return ttu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ttu *TaskTypeUpdate) SetNillableType(et *enum.TaskType) *TaskTypeUpdate {
	if et != nil {
		ttu.SetType(*et)
	}
	return ttu
}

// SetTextFeature sets the "text_feature" field.
func (ttu *TaskTypeUpdate) SetTextFeature(pg pgvector.Vector) *TaskTypeUpdate {
	ttu.mutation.SetTextFeature(pg)
	return ttu
}

// SetNillableTextFeature sets the "text_feature" field if the given value is not nil.
func (ttu *TaskTypeUpdate) SetNillableTextFeature(pg *pgvector.Vector) *TaskTypeUpdate {
	if pg != nil {
		ttu.SetTextFeature(*pg)
	}
	return ttu
}

// ClearTextFeature clears the value of the "text_feature" field.
func (ttu *TaskTypeUpdate) ClearTextFeature() *TaskTypeUpdate {
	ttu.mutation.ClearTextFeature()
	return ttu
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttu *TaskTypeUpdate) Mutation() *TaskTypeMutation {
	return ttu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TaskTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TaskTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TaskTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TaskTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TaskTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasktype.Table, tasktype.Columns, sqlgraph.NewFieldSpec(tasktype.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.GetType(); ok {
		_spec.SetField(tasktype.FieldType, field.TypeString, value)
	}
	if value, ok := ttu.mutation.TextFeature(); ok {
		_spec.SetField(tasktype.FieldTextFeature, field.TypeOther, value)
	}
	if ttu.mutation.TextFeatureCleared() {
		_spec.ClearField(tasktype.FieldTextFeature, field.TypeOther)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TaskTypeUpdateOne is the builder for updating a single TaskType entity.
type TaskTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskTypeMutation
}

// SetType sets the "type" field.
func (ttuo *TaskTypeUpdateOne) SetType(et enum.TaskType) *TaskTypeUpdateOne {
	ttuo.mutation.SetType(et)
	return ttuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ttuo *TaskTypeUpdateOne) SetNillableType(et *enum.TaskType) *TaskTypeUpdateOne {
	if et != nil {
		ttuo.SetType(*et)
	}
	return ttuo
}

// SetTextFeature sets the "text_feature" field.
func (ttuo *TaskTypeUpdateOne) SetTextFeature(pg pgvector.Vector) *TaskTypeUpdateOne {
	ttuo.mutation.SetTextFeature(pg)
	return ttuo
}

// SetNillableTextFeature sets the "text_feature" field if the given value is not nil.
func (ttuo *TaskTypeUpdateOne) SetNillableTextFeature(pg *pgvector.Vector) *TaskTypeUpdateOne {
	if pg != nil {
		ttuo.SetTextFeature(*pg)
	}
	return ttuo
}

// ClearTextFeature clears the value of the "text_feature" field.
func (ttuo *TaskTypeUpdateOne) ClearTextFeature() *TaskTypeUpdateOne {
	ttuo.mutation.ClearTextFeature()
	return ttuo
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttuo *TaskTypeUpdateOne) Mutation() *TaskTypeMutation {
	return ttuo.mutation
}

// Where appends a list predicates to the TaskTypeUpdate builder.
func (ttuo *TaskTypeUpdateOne) Where(ps ...predicate.TaskType) *TaskTypeUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TaskTypeUpdateOne) Select(field string, fields ...string) *TaskTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TaskType entity.
func (ttuo *TaskTypeUpdateOne) Save(ctx context.Context) (*TaskType, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TaskTypeUpdateOne) SaveX(ctx context.Context) *TaskType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TaskTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TaskTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TaskTypeUpdateOne) sqlSave(ctx context.Context) (_node *TaskType, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasktype.Table, tasktype.Columns, sqlgraph.NewFieldSpec(tasktype.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktype.FieldID)
		for _, f := range fields {
			if !tasktype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasktype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.GetType(); ok {
		_spec.SetField(tasktype.FieldType, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.TextFeature(); ok {
		_spec.SetField(tasktype.FieldTextFeature, field.TypeOther, value)
	}
	if ttuo.mutation.TextFeatureCleared() {
		_spec.ClearField(tasktype.FieldTextFeature, field.TypeOther)
	}
	_node = &TaskType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
