// Code generated by ent, DO NOT EDIT.

package dailytask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/aki-13627/animalia/backend-go/ent/enum"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldEQ(FieldCreatedAt, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldEQ(FieldType, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DailyTask {
	return predicate.DailyTask(sql.FieldLTE(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...enum.TaskType) predicate.DailyTask {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.DailyTask(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...enum.TaskType) predicate.DailyTask {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.DailyTask(sql.FieldNotIn(FieldType, v...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldGT(FieldType, vc))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldGTE(FieldType, vc))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldLT(FieldType, vc))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldLTE(FieldType, vc))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldContains(FieldType, vc))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldHasPrefix(FieldType, vc))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldHasSuffix(FieldType, vc))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldEqualFold(FieldType, vc))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v enum.TaskType) predicate.DailyTask {
	vc := string(v)
	return predicate.DailyTask(sql.FieldContainsFold(FieldType, vc))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.DailyTask {
	return predicate.DailyTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.DailyTask {
	return predicate.DailyTask(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.DailyTask {
	return predicate.DailyTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.DailyTask {
	return predicate.DailyTask(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DailyTask) predicate.DailyTask {
	return predicate.DailyTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DailyTask) predicate.DailyTask {
	return predicate.DailyTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DailyTask) predicate.DailyTask {
	return predicate.DailyTask(sql.NotPredicates(p))
}
