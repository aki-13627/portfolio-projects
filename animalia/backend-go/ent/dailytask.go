// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/aki-13627/animalia/backend-go/ent/dailytask"
	"github.com/aki-13627/animalia/backend-go/ent/enum"
	"github.com/aki-13627/animalia/backend-go/ent/post"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// DailyTask is the model entity for the DailyTask schema.
type DailyTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Type holds the value of the "type" field.
	Type enum.TaskType `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DailyTaskQuery when eager-loading is set.
	Edges            DailyTaskEdges `json:"edges"`
	post_daily_task  *uuid.UUID
	user_daily_tasks *uuid.UUID
	selectValues     sql.SelectValues
}

// DailyTaskEdges holds the relations/edges for other nodes in the graph.
type DailyTaskEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyTaskEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyTaskEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailytask.FieldType:
			values[i] = new(sql.NullString)
		case dailytask.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case dailytask.FieldID:
			values[i] = new(uuid.UUID)
		case dailytask.ForeignKeys[0]: // post_daily_task
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case dailytask.ForeignKeys[1]: // user_daily_tasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyTask fields.
func (dt *DailyTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailytask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dt.ID = *value
			}
		case dailytask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dt.CreatedAt = value.Time
			}
		case dailytask.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				dt.Type = enum.TaskType(value.String)
			}
		case dailytask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field post_daily_task", values[i])
			} else if value.Valid {
				dt.post_daily_task = new(uuid.UUID)
				*dt.post_daily_task = *value.S.(*uuid.UUID)
			}
		case dailytask.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_daily_tasks", values[i])
			} else if value.Valid {
				dt.user_daily_tasks = new(uuid.UUID)
				*dt.user_daily_tasks = *value.S.(*uuid.UUID)
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DailyTask.
// This includes values selected through modifiers, order, etc.
func (dt *DailyTask) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the DailyTask entity.
func (dt *DailyTask) QueryUser() *UserQuery {
	return NewDailyTaskClient(dt.config).QueryUser(dt)
}

// QueryPost queries the "post" edge of the DailyTask entity.
func (dt *DailyTask) QueryPost() *PostQuery {
	return NewDailyTaskClient(dt.config).QueryPost(dt)
}

// Update returns a builder for updating this DailyTask.
// Note that you need to call DailyTask.Unwrap() before calling this method if this DailyTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DailyTask) Update() *DailyTaskUpdateOne {
	return NewDailyTaskClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DailyTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DailyTask) Unwrap() *DailyTask {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyTask is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DailyTask) String() string {
	var builder strings.Builder
	builder.WriteString("DailyTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", dt.Type))
	builder.WriteByte(')')
	return builder.String()
}

// DailyTasks is a parsable slice of DailyTask.
type DailyTasks []*DailyTask
