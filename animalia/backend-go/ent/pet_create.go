// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/pet"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// PetCreate is the builder for creating a Pet entity.
type PetCreate struct {
	config
	mutation *PetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pc *PetCreate) SetName(s string) *PetCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetBirthDay sets the "birth_day" field.
func (pc *PetCreate) SetBirthDay(s string) *PetCreate {
	pc.mutation.SetBirthDay(s)
	return pc
}

// SetType sets the "type" field.
func (pc *PetCreate) SetType(pe pet.Type) *PetCreate {
	pc.mutation.SetType(pe)
	return pc
}

// SetSpecies sets the "species" field.
func (pc *PetCreate) SetSpecies(pe pet.Species) *PetCreate {
	pc.mutation.SetSpecies(pe)
	return pc
}

// SetImageKey sets the "image_key" field.
func (pc *PetCreate) SetImageKey(s string) *PetCreate {
	pc.mutation.SetImageKey(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PetCreate) SetCreatedAt(t time.Time) *PetCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PetCreate) SetNillableCreatedAt(t *time.Time) *PetCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PetCreate) SetDeletedAt(t time.Time) *PetCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PetCreate) SetNillableDeletedAt(t *time.Time) *PetCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PetCreate) SetID(u uuid.UUID) *PetCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PetCreate) SetNillableID(u *uuid.UUID) *PetCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pc *PetCreate) SetOwnerID(id uuid.UUID) *PetCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetOwner sets the "owner" edge to the User entity.
func (pc *PetCreate) SetOwner(u *User) *PetCreate {
	return pc.SetOwnerID(u.ID)
}

// Mutation returns the PetMutation object of the builder.
func (pc *PetCreate) Mutation() *PetMutation {
	return pc.mutation
}

// Save creates the Pet in the database.
func (pc *PetCreate) Save(ctx context.Context) (*Pet, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PetCreate) SaveX(ctx context.Context) *Pet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PetCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PetCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PetCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := pet.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := pet.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PetCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Pet.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pet.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BirthDay(); !ok {
		return &ValidationError{Name: "birth_day", err: errors.New(`ent: missing required field "Pet.birth_day"`)}
	}
	if v, ok := pc.mutation.BirthDay(); ok {
		if err := pet.BirthDayValidator(v); err != nil {
			return &ValidationError{Name: "birth_day", err: fmt.Errorf(`ent: validator failed for field "Pet.birth_day": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Pet.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := pet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pet.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Species(); !ok {
		return &ValidationError{Name: "species", err: errors.New(`ent: missing required field "Pet.species"`)}
	}
	if v, ok := pc.mutation.Species(); ok {
		if err := pet.SpeciesValidator(v); err != nil {
			return &ValidationError{Name: "species", err: fmt.Errorf(`ent: validator failed for field "Pet.species": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ImageKey(); !ok {
		return &ValidationError{Name: "image_key", err: errors.New(`ent: missing required field "Pet.image_key"`)}
	}
	if v, ok := pc.mutation.ImageKey(); ok {
		if err := pet.ImageKeyValidator(v); err != nil {
			return &ValidationError{Name: "image_key", err: fmt.Errorf(`ent: validator failed for field "Pet.image_key": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pet.created_at"`)}
	}
	if len(pc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Pet.owner"`)}
	}
	return nil
}

func (pc *PetCreate) sqlSave(ctx context.Context) (*Pet, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PetCreate) createSpec() (*Pet, *sqlgraph.CreateSpec) {
	var (
		_node = &Pet{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pet.Table, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.BirthDay(); ok {
		_spec.SetField(pet.FieldBirthDay, field.TypeString, value)
		_node.BirthDay = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(pet.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Species(); ok {
		_spec.SetField(pet.FieldSpecies, field.TypeEnum, value)
		_node.Species = value
	}
	if value, ok := pc.mutation.ImageKey(); ok {
		_spec.SetField(pet.FieldImageKey, field.TypeString, value)
		_node.ImageKey = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(pet.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_pets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pet.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PetUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pc *PetCreate) OnConflict(opts ...sql.ConflictOption) *PetUpsertOne {
	pc.conflict = opts
	return &PetUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PetCreate) OnConflictColumns(columns ...string) *PetUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PetUpsertOne{
		create: pc,
	}
}

type (
	// PetUpsertOne is the builder for "upsert"-ing
	//  one Pet node.
	PetUpsertOne struct {
		create *PetCreate
	}

	// PetUpsert is the "OnConflict" setter.
	PetUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PetUpsert) SetName(v string) *PetUpsert {
	u.Set(pet.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PetUpsert) UpdateName() *PetUpsert {
	u.SetExcluded(pet.FieldName)
	return u
}

// SetBirthDay sets the "birth_day" field.
func (u *PetUpsert) SetBirthDay(v string) *PetUpsert {
	u.Set(pet.FieldBirthDay, v)
	return u
}

// UpdateBirthDay sets the "birth_day" field to the value that was provided on create.
func (u *PetUpsert) UpdateBirthDay() *PetUpsert {
	u.SetExcluded(pet.FieldBirthDay)
	return u
}

// SetType sets the "type" field.
func (u *PetUpsert) SetType(v pet.Type) *PetUpsert {
	u.Set(pet.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PetUpsert) UpdateType() *PetUpsert {
	u.SetExcluded(pet.FieldType)
	return u
}

// SetSpecies sets the "species" field.
func (u *PetUpsert) SetSpecies(v pet.Species) *PetUpsert {
	u.Set(pet.FieldSpecies, v)
	return u
}

// UpdateSpecies sets the "species" field to the value that was provided on create.
func (u *PetUpsert) UpdateSpecies() *PetUpsert {
	u.SetExcluded(pet.FieldSpecies)
	return u
}

// SetImageKey sets the "image_key" field.
func (u *PetUpsert) SetImageKey(v string) *PetUpsert {
	u.Set(pet.FieldImageKey, v)
	return u
}

// UpdateImageKey sets the "image_key" field to the value that was provided on create.
func (u *PetUpsert) UpdateImageKey() *PetUpsert {
	u.SetExcluded(pet.FieldImageKey)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PetUpsert) SetCreatedAt(v time.Time) *PetUpsert {
	u.Set(pet.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PetUpsert) UpdateCreatedAt() *PetUpsert {
	u.SetExcluded(pet.FieldCreatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PetUpsert) SetDeletedAt(v time.Time) *PetUpsert {
	u.Set(pet.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PetUpsert) UpdateDeletedAt() *PetUpsert {
	u.SetExcluded(pet.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PetUpsert) ClearDeletedAt() *PetUpsert {
	u.SetNull(pet.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Pet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PetUpsertOne) UpdateNewValues() *PetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PetUpsertOne) Ignore() *PetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PetUpsertOne) DoNothing() *PetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PetCreate.OnConflict
// documentation for more info.
func (u *PetUpsertOne) Update(set func(*PetUpsert)) *PetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PetUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PetUpsertOne) SetName(v string) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateName() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateName()
	})
}

// SetBirthDay sets the "birth_day" field.
func (u *PetUpsertOne) SetBirthDay(v string) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetBirthDay(v)
	})
}

// UpdateBirthDay sets the "birth_day" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateBirthDay() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateBirthDay()
	})
}

// SetType sets the "type" field.
func (u *PetUpsertOne) SetType(v pet.Type) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateType() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateType()
	})
}

// SetSpecies sets the "species" field.
func (u *PetUpsertOne) SetSpecies(v pet.Species) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetSpecies(v)
	})
}

// UpdateSpecies sets the "species" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateSpecies() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateSpecies()
	})
}

// SetImageKey sets the "image_key" field.
func (u *PetUpsertOne) SetImageKey(v string) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetImageKey(v)
	})
}

// UpdateImageKey sets the "image_key" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateImageKey() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateImageKey()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PetUpsertOne) SetCreatedAt(v time.Time) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateCreatedAt() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PetUpsertOne) SetDeletedAt(v time.Time) *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PetUpsertOne) UpdateDeletedAt() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PetUpsertOne) ClearDeletedAt() *PetUpsertOne {
	return u.Update(func(s *PetUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *PetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PetUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PetUpsertOne.ID is not supported by MySQL driver. Use PetUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PetUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PetCreateBulk is the builder for creating many Pet entities in bulk.
type PetCreateBulk struct {
	config
	err      error
	builders []*PetCreate
	conflict []sql.ConflictOption
}

// Save creates the Pet entities in the database.
func (pcb *PetCreateBulk) Save(ctx context.Context) ([]*Pet, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pet, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PetCreateBulk) SaveX(ctx context.Context) []*Pet {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PetCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PetCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PetUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pcb *PetCreateBulk) OnConflict(opts ...sql.ConflictOption) *PetUpsertBulk {
	pcb.conflict = opts
	return &PetUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PetCreateBulk) OnConflictColumns(columns ...string) *PetUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PetUpsertBulk{
		create: pcb,
	}
}

// PetUpsertBulk is the builder for "upsert"-ing
// a bulk of Pet nodes.
type PetUpsertBulk struct {
	create *PetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PetUpsertBulk) UpdateNewValues() *PetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pet.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PetUpsertBulk) Ignore() *PetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PetUpsertBulk) DoNothing() *PetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PetCreateBulk.OnConflict
// documentation for more info.
func (u *PetUpsertBulk) Update(set func(*PetUpsert)) *PetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PetUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PetUpsertBulk) SetName(v string) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateName() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateName()
	})
}

// SetBirthDay sets the "birth_day" field.
func (u *PetUpsertBulk) SetBirthDay(v string) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetBirthDay(v)
	})
}

// UpdateBirthDay sets the "birth_day" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateBirthDay() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateBirthDay()
	})
}

// SetType sets the "type" field.
func (u *PetUpsertBulk) SetType(v pet.Type) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateType() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateType()
	})
}

// SetSpecies sets the "species" field.
func (u *PetUpsertBulk) SetSpecies(v pet.Species) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetSpecies(v)
	})
}

// UpdateSpecies sets the "species" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateSpecies() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateSpecies()
	})
}

// SetImageKey sets the "image_key" field.
func (u *PetUpsertBulk) SetImageKey(v string) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetImageKey(v)
	})
}

// UpdateImageKey sets the "image_key" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateImageKey() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateImageKey()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PetUpsertBulk) SetCreatedAt(v time.Time) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateCreatedAt() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PetUpsertBulk) SetDeletedAt(v time.Time) *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PetUpsertBulk) UpdateDeletedAt() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PetUpsertBulk) ClearDeletedAt() *PetUpsertBulk {
	return u.Update(func(s *PetUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *PetUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
