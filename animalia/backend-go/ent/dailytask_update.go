// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/dailytask"
	"github.com/aki-13627/animalia/backend-go/ent/enum"
	"github.com/aki-13627/animalia/backend-go/ent/post"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// DailyTaskUpdate is the builder for updating DailyTask entities.
type DailyTaskUpdate struct {
	config
	hooks    []Hook
	mutation *DailyTaskMutation
}

// Where appends a list predicates to the DailyTaskUpdate builder.
func (dtu *DailyTaskUpdate) Where(ps ...predicate.DailyTask) *DailyTaskUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetCreatedAt sets the "created_at" field.
func (dtu *DailyTaskUpdate) SetCreatedAt(t time.Time) *DailyTaskUpdate {
	dtu.mutation.SetCreatedAt(t)
	return dtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtu *DailyTaskUpdate) SetNillableCreatedAt(t *time.Time) *DailyTaskUpdate {
	if t != nil {
		dtu.SetCreatedAt(*t)
	}
	return dtu
}

// SetType sets the "type" field.
func (dtu *DailyTaskUpdate) SetType(et enum.TaskType) *DailyTaskUpdate {
	dtu.mutation.SetType(et)
	return dtu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dtu *DailyTaskUpdate) SetNillableType(et *enum.TaskType) *DailyTaskUpdate {
	if et != nil {
		dtu.SetType(*et)
	}
	return dtu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dtu *DailyTaskUpdate) SetUserID(id uuid.UUID) *DailyTaskUpdate {
	dtu.mutation.SetUserID(id)
	return dtu
}

// SetUser sets the "user" edge to the User entity.
func (dtu *DailyTaskUpdate) SetUser(u *User) *DailyTaskUpdate {
	return dtu.SetUserID(u.ID)
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (dtu *DailyTaskUpdate) SetPostID(id uuid.UUID) *DailyTaskUpdate {
	dtu.mutation.SetPostID(id)
	return dtu
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (dtu *DailyTaskUpdate) SetNillablePostID(id *uuid.UUID) *DailyTaskUpdate {
	if id != nil {
		dtu = dtu.SetPostID(*id)
	}
	return dtu
}

// SetPost sets the "post" edge to the Post entity.
func (dtu *DailyTaskUpdate) SetPost(p *Post) *DailyTaskUpdate {
	return dtu.SetPostID(p.ID)
}

// Mutation returns the DailyTaskMutation object of the builder.
func (dtu *DailyTaskUpdate) Mutation() *DailyTaskMutation {
	return dtu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (dtu *DailyTaskUpdate) ClearUser() *DailyTaskUpdate {
	dtu.mutation.ClearUser()
	return dtu
}

// ClearPost clears the "post" edge to the Post entity.
func (dtu *DailyTaskUpdate) ClearPost() *DailyTaskUpdate {
	dtu.mutation.ClearPost()
	return dtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DailyTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DailyTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DailyTaskUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DailyTaskUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtu *DailyTaskUpdate) check() error {
	if dtu.mutation.UserCleared() && len(dtu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTask.user"`)
	}
	return nil
}

func (dtu *DailyTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailytask.Table, dailytask.Columns, sqlgraph.NewFieldSpec(dailytask.FieldID, field.TypeUUID))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.CreatedAt(); ok {
		_spec.SetField(dailytask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dtu.mutation.GetType(); ok {
		_spec.SetField(dailytask.FieldType, field.TypeString, value)
	}
	if dtu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytask.UserTable,
			Columns: []string{dailytask.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytask.UserTable,
			Columns: []string{dailytask.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dailytask.PostTable,
			Columns: []string{dailytask.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dailytask.PostTable,
			Columns: []string{dailytask.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DailyTaskUpdateOne is the builder for updating a single DailyTask entity.
type DailyTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DailyTaskMutation
}

// SetCreatedAt sets the "created_at" field.
func (dtuo *DailyTaskUpdateOne) SetCreatedAt(t time.Time) *DailyTaskUpdateOne {
	dtuo.mutation.SetCreatedAt(t)
	return dtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtuo *DailyTaskUpdateOne) SetNillableCreatedAt(t *time.Time) *DailyTaskUpdateOne {
	if t != nil {
		dtuo.SetCreatedAt(*t)
	}
	return dtuo
}

// SetType sets the "type" field.
func (dtuo *DailyTaskUpdateOne) SetType(et enum.TaskType) *DailyTaskUpdateOne {
	dtuo.mutation.SetType(et)
	return dtuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dtuo *DailyTaskUpdateOne) SetNillableType(et *enum.TaskType) *DailyTaskUpdateOne {
	if et != nil {
		dtuo.SetType(*et)
	}
	return dtuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dtuo *DailyTaskUpdateOne) SetUserID(id uuid.UUID) *DailyTaskUpdateOne {
	dtuo.mutation.SetUserID(id)
	return dtuo
}

// SetUser sets the "user" edge to the User entity.
func (dtuo *DailyTaskUpdateOne) SetUser(u *User) *DailyTaskUpdateOne {
	return dtuo.SetUserID(u.ID)
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (dtuo *DailyTaskUpdateOne) SetPostID(id uuid.UUID) *DailyTaskUpdateOne {
	dtuo.mutation.SetPostID(id)
	return dtuo
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (dtuo *DailyTaskUpdateOne) SetNillablePostID(id *uuid.UUID) *DailyTaskUpdateOne {
	if id != nil {
		dtuo = dtuo.SetPostID(*id)
	}
	return dtuo
}

// SetPost sets the "post" edge to the Post entity.
func (dtuo *DailyTaskUpdateOne) SetPost(p *Post) *DailyTaskUpdateOne {
	return dtuo.SetPostID(p.ID)
}

// Mutation returns the DailyTaskMutation object of the builder.
func (dtuo *DailyTaskUpdateOne) Mutation() *DailyTaskMutation {
	return dtuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (dtuo *DailyTaskUpdateOne) ClearUser() *DailyTaskUpdateOne {
	dtuo.mutation.ClearUser()
	return dtuo
}

// ClearPost clears the "post" edge to the Post entity.
func (dtuo *DailyTaskUpdateOne) ClearPost() *DailyTaskUpdateOne {
	dtuo.mutation.ClearPost()
	return dtuo
}

// Where appends a list predicates to the DailyTaskUpdate builder.
func (dtuo *DailyTaskUpdateOne) Where(ps ...predicate.DailyTask) *DailyTaskUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DailyTaskUpdateOne) Select(field string, fields ...string) *DailyTaskUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DailyTask entity.
func (dtuo *DailyTaskUpdateOne) Save(ctx context.Context) (*DailyTask, error) {
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DailyTaskUpdateOne) SaveX(ctx context.Context) *DailyTask {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DailyTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DailyTaskUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtuo *DailyTaskUpdateOne) check() error {
	if dtuo.mutation.UserCleared() && len(dtuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DailyTask.user"`)
	}
	return nil
}

func (dtuo *DailyTaskUpdateOne) sqlSave(ctx context.Context) (_node *DailyTask, err error) {
	if err := dtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dailytask.Table, dailytask.Columns, sqlgraph.NewFieldSpec(dailytask.FieldID, field.TypeUUID))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DailyTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dailytask.FieldID)
		for _, f := range fields {
			if !dailytask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dailytask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.CreatedAt(); ok {
		_spec.SetField(dailytask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dtuo.mutation.GetType(); ok {
		_spec.SetField(dailytask.FieldType, field.TypeString, value)
	}
	if dtuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytask.UserTable,
			Columns: []string{dailytask.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytask.UserTable,
			Columns: []string{dailytask.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dailytask.PostTable,
			Columns: []string{dailytask.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dailytask.PostTable,
			Columns: []string{dailytask.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DailyTask{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dailytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
