// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/followrelation"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// FollowRelationUpdate is the builder for updating FollowRelation entities.
type FollowRelationUpdate struct {
	config
	hooks    []Hook
	mutation *FollowRelationMutation
}

// Where appends a list predicates to the FollowRelationUpdate builder.
func (fru *FollowRelationUpdate) Where(ps ...predicate.FollowRelation) *FollowRelationUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetCreatedAt sets the "created_at" field.
func (fru *FollowRelationUpdate) SetCreatedAt(t time.Time) *FollowRelationUpdate {
	fru.mutation.SetCreatedAt(t)
	return fru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fru *FollowRelationUpdate) SetNillableCreatedAt(t *time.Time) *FollowRelationUpdate {
	if t != nil {
		fru.SetCreatedAt(*t)
	}
	return fru
}

// SetFromID sets the "from" edge to the User entity by ID.
func (fru *FollowRelationUpdate) SetFromID(id uuid.UUID) *FollowRelationUpdate {
	fru.mutation.SetFromID(id)
	return fru
}

// SetFrom sets the "from" edge to the User entity.
func (fru *FollowRelationUpdate) SetFrom(u *User) *FollowRelationUpdate {
	return fru.SetFromID(u.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (fru *FollowRelationUpdate) SetToID(id uuid.UUID) *FollowRelationUpdate {
	fru.mutation.SetToID(id)
	return fru
}

// SetTo sets the "to" edge to the User entity.
func (fru *FollowRelationUpdate) SetTo(u *User) *FollowRelationUpdate {
	return fru.SetToID(u.ID)
}

// Mutation returns the FollowRelationMutation object of the builder.
func (fru *FollowRelationUpdate) Mutation() *FollowRelationMutation {
	return fru.mutation
}

// ClearFrom clears the "from" edge to the User entity.
func (fru *FollowRelationUpdate) ClearFrom() *FollowRelationUpdate {
	fru.mutation.ClearFrom()
	return fru
}

// ClearTo clears the "to" edge to the User entity.
func (fru *FollowRelationUpdate) ClearTo() *FollowRelationUpdate {
	fru.mutation.ClearTo()
	return fru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FollowRelationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fru.sqlSave, fru.mutation, fru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FollowRelationUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FollowRelationUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FollowRelationUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FollowRelationUpdate) check() error {
	if fru.mutation.FromCleared() && len(fru.mutation.FromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FollowRelation.from"`)
	}
	if fru.mutation.ToCleared() && len(fru.mutation.ToIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FollowRelation.to"`)
	}
	return nil
}

func (fru *FollowRelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(followrelation.Table, followrelation.Columns, sqlgraph.NewFieldSpec(followrelation.FieldID, field.TypeUUID))
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.CreatedAt(); ok {
		_spec.SetField(followrelation.FieldCreatedAt, field.TypeTime, value)
	}
	if fru.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.FromTable,
			Columns: []string{followrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.FromTable,
			Columns: []string{followrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fru.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.ToTable,
			Columns: []string{followrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.ToTable,
			Columns: []string{followrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fru.mutation.done = true
	return n, nil
}

// FollowRelationUpdateOne is the builder for updating a single FollowRelation entity.
type FollowRelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FollowRelationMutation
}

// SetCreatedAt sets the "created_at" field.
func (fruo *FollowRelationUpdateOne) SetCreatedAt(t time.Time) *FollowRelationUpdateOne {
	fruo.mutation.SetCreatedAt(t)
	return fruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fruo *FollowRelationUpdateOne) SetNillableCreatedAt(t *time.Time) *FollowRelationUpdateOne {
	if t != nil {
		fruo.SetCreatedAt(*t)
	}
	return fruo
}

// SetFromID sets the "from" edge to the User entity by ID.
func (fruo *FollowRelationUpdateOne) SetFromID(id uuid.UUID) *FollowRelationUpdateOne {
	fruo.mutation.SetFromID(id)
	return fruo
}

// SetFrom sets the "from" edge to the User entity.
func (fruo *FollowRelationUpdateOne) SetFrom(u *User) *FollowRelationUpdateOne {
	return fruo.SetFromID(u.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (fruo *FollowRelationUpdateOne) SetToID(id uuid.UUID) *FollowRelationUpdateOne {
	fruo.mutation.SetToID(id)
	return fruo
}

// SetTo sets the "to" edge to the User entity.
func (fruo *FollowRelationUpdateOne) SetTo(u *User) *FollowRelationUpdateOne {
	return fruo.SetToID(u.ID)
}

// Mutation returns the FollowRelationMutation object of the builder.
func (fruo *FollowRelationUpdateOne) Mutation() *FollowRelationMutation {
	return fruo.mutation
}

// ClearFrom clears the "from" edge to the User entity.
func (fruo *FollowRelationUpdateOne) ClearFrom() *FollowRelationUpdateOne {
	fruo.mutation.ClearFrom()
	return fruo
}

// ClearTo clears the "to" edge to the User entity.
func (fruo *FollowRelationUpdateOne) ClearTo() *FollowRelationUpdateOne {
	fruo.mutation.ClearTo()
	return fruo
}

// Where appends a list predicates to the FollowRelationUpdate builder.
func (fruo *FollowRelationUpdateOne) Where(ps ...predicate.FollowRelation) *FollowRelationUpdateOne {
	fruo.mutation.Where(ps...)
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FollowRelationUpdateOne) Select(field string, fields ...string) *FollowRelationUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FollowRelation entity.
func (fruo *FollowRelationUpdateOne) Save(ctx context.Context) (*FollowRelation, error) {
	return withHooks(ctx, fruo.sqlSave, fruo.mutation, fruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FollowRelationUpdateOne) SaveX(ctx context.Context) *FollowRelation {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FollowRelationUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FollowRelationUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FollowRelationUpdateOne) check() error {
	if fruo.mutation.FromCleared() && len(fruo.mutation.FromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FollowRelation.from"`)
	}
	if fruo.mutation.ToCleared() && len(fruo.mutation.ToIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FollowRelation.to"`)
	}
	return nil
}

func (fruo *FollowRelationUpdateOne) sqlSave(ctx context.Context) (_node *FollowRelation, err error) {
	if err := fruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(followrelation.Table, followrelation.Columns, sqlgraph.NewFieldSpec(followrelation.FieldID, field.TypeUUID))
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FollowRelation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, followrelation.FieldID)
		for _, f := range fields {
			if !followrelation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != followrelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.CreatedAt(); ok {
		_spec.SetField(followrelation.FieldCreatedAt, field.TypeTime, value)
	}
	if fruo.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.FromTable,
			Columns: []string{followrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.FromTable,
			Columns: []string{followrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fruo.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.ToTable,
			Columns: []string{followrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followrelation.ToTable,
			Columns: []string{followrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FollowRelation{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fruo.mutation.done = true
	return _node, nil
}
