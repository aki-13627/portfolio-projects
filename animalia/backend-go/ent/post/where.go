// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIndex, v))
}

// Caption applies equality check predicate on the "caption" field. It's identical to CaptionEQ.
func Caption(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCaption, v))
}

// ImageKey applies equality check predicate on the "image_key" field. It's identical to ImageKeyEQ.
func ImageKey(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldImageKey, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeletedAt, v))
}

// ImageFeature applies equality check predicate on the "image_feature" field. It's identical to ImageFeatureEQ.
func ImageFeature(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldImageFeature, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldIndex, v))
}

// IndexIsNil applies the IsNil predicate on the "index" field.
func IndexIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldIndex))
}

// IndexNotNil applies the NotNil predicate on the "index" field.
func IndexNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldIndex))
}

// CaptionEQ applies the EQ predicate on the "caption" field.
func CaptionEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCaption, v))
}

// CaptionNEQ applies the NEQ predicate on the "caption" field.
func CaptionNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCaption, v))
}

// CaptionIn applies the In predicate on the "caption" field.
func CaptionIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCaption, vs...))
}

// CaptionNotIn applies the NotIn predicate on the "caption" field.
func CaptionNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCaption, vs...))
}

// CaptionGT applies the GT predicate on the "caption" field.
func CaptionGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCaption, v))
}

// CaptionGTE applies the GTE predicate on the "caption" field.
func CaptionGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCaption, v))
}

// CaptionLT applies the LT predicate on the "caption" field.
func CaptionLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCaption, v))
}

// CaptionLTE applies the LTE predicate on the "caption" field.
func CaptionLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCaption, v))
}

// CaptionContains applies the Contains predicate on the "caption" field.
func CaptionContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldCaption, v))
}

// CaptionHasPrefix applies the HasPrefix predicate on the "caption" field.
func CaptionHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldCaption, v))
}

// CaptionHasSuffix applies the HasSuffix predicate on the "caption" field.
func CaptionHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldCaption, v))
}

// CaptionEqualFold applies the EqualFold predicate on the "caption" field.
func CaptionEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldCaption, v))
}

// CaptionContainsFold applies the ContainsFold predicate on the "caption" field.
func CaptionContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldCaption, v))
}

// ImageKeyEQ applies the EQ predicate on the "image_key" field.
func ImageKeyEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldImageKey, v))
}

// ImageKeyNEQ applies the NEQ predicate on the "image_key" field.
func ImageKeyNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldImageKey, v))
}

// ImageKeyIn applies the In predicate on the "image_key" field.
func ImageKeyIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldImageKey, vs...))
}

// ImageKeyNotIn applies the NotIn predicate on the "image_key" field.
func ImageKeyNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldImageKey, vs...))
}

// ImageKeyGT applies the GT predicate on the "image_key" field.
func ImageKeyGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldImageKey, v))
}

// ImageKeyGTE applies the GTE predicate on the "image_key" field.
func ImageKeyGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldImageKey, v))
}

// ImageKeyLT applies the LT predicate on the "image_key" field.
func ImageKeyLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldImageKey, v))
}

// ImageKeyLTE applies the LTE predicate on the "image_key" field.
func ImageKeyLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldImageKey, v))
}

// ImageKeyContains applies the Contains predicate on the "image_key" field.
func ImageKeyContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldImageKey, v))
}

// ImageKeyHasPrefix applies the HasPrefix predicate on the "image_key" field.
func ImageKeyHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldImageKey, v))
}

// ImageKeyHasSuffix applies the HasSuffix predicate on the "image_key" field.
func ImageKeyHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldImageKey, v))
}

// ImageKeyEqualFold applies the EqualFold predicate on the "image_key" field.
func ImageKeyEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldImageKey, v))
}

// ImageKeyContainsFold applies the ContainsFold predicate on the "image_key" field.
func ImageKeyContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldImageKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldDeletedAt))
}

// ImageFeatureEQ applies the EQ predicate on the "image_feature" field.
func ImageFeatureEQ(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldImageFeature, v))
}

// ImageFeatureNEQ applies the NEQ predicate on the "image_feature" field.
func ImageFeatureNEQ(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldImageFeature, v))
}

// ImageFeatureIn applies the In predicate on the "image_feature" field.
func ImageFeatureIn(vs ...pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldImageFeature, vs...))
}

// ImageFeatureNotIn applies the NotIn predicate on the "image_feature" field.
func ImageFeatureNotIn(vs ...pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldImageFeature, vs...))
}

// ImageFeatureGT applies the GT predicate on the "image_feature" field.
func ImageFeatureGT(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldImageFeature, v))
}

// ImageFeatureGTE applies the GTE predicate on the "image_feature" field.
func ImageFeatureGTE(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldImageFeature, v))
}

// ImageFeatureLT applies the LT predicate on the "image_feature" field.
func ImageFeatureLT(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldImageFeature, v))
}

// ImageFeatureLTE applies the LTE predicate on the "image_feature" field.
func ImageFeatureLTE(v pgvector.Vector) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldImageFeature, v))
}

// ImageFeatureIsNil applies the IsNil predicate on the "image_feature" field.
func ImageFeatureIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldImageFeature))
}

// ImageFeatureNotNil applies the NotNil predicate on the "image_feature" field.
func ImageFeatureNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldImageFeature))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikes applies the HasEdge predicate on the "likes" edge.
func HasLikes() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikesWith applies the HasEdge predicate on the "likes" edge with a given conditions (other predicates).
func HasLikesWith(preds ...predicate.Like) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDailyTask applies the HasEdge predicate on the "daily_task" edge.
func HasDailyTask() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DailyTaskTable, DailyTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDailyTaskWith applies the HasEdge predicate on the "daily_task" edge with a given conditions (other predicates).
func HasDailyTaskWith(preds ...predicate.DailyTask) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newDailyTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
