// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/dailytask"
	"github.com/aki-13627/animalia/backend-go/ent/enum"
	"github.com/aki-13627/animalia/backend-go/ent/post"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// DailyTaskCreate is the builder for creating a DailyTask entity.
type DailyTaskCreate struct {
	config
	mutation *DailyTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dtc *DailyTaskCreate) SetCreatedAt(t time.Time) *DailyTaskCreate {
	dtc.mutation.SetCreatedAt(t)
	return dtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtc *DailyTaskCreate) SetNillableCreatedAt(t *time.Time) *DailyTaskCreate {
	if t != nil {
		dtc.SetCreatedAt(*t)
	}
	return dtc
}

// SetType sets the "type" field.
func (dtc *DailyTaskCreate) SetType(et enum.TaskType) *DailyTaskCreate {
	dtc.mutation.SetType(et)
	return dtc
}

// SetID sets the "id" field.
func (dtc *DailyTaskCreate) SetID(u uuid.UUID) *DailyTaskCreate {
	dtc.mutation.SetID(u)
	return dtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dtc *DailyTaskCreate) SetNillableID(u *uuid.UUID) *DailyTaskCreate {
	if u != nil {
		dtc.SetID(*u)
	}
	return dtc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dtc *DailyTaskCreate) SetUserID(id uuid.UUID) *DailyTaskCreate {
	dtc.mutation.SetUserID(id)
	return dtc
}

// SetUser sets the "user" edge to the User entity.
func (dtc *DailyTaskCreate) SetUser(u *User) *DailyTaskCreate {
	return dtc.SetUserID(u.ID)
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (dtc *DailyTaskCreate) SetPostID(id uuid.UUID) *DailyTaskCreate {
	dtc.mutation.SetPostID(id)
	return dtc
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (dtc *DailyTaskCreate) SetNillablePostID(id *uuid.UUID) *DailyTaskCreate {
	if id != nil {
		dtc = dtc.SetPostID(*id)
	}
	return dtc
}

// SetPost sets the "post" edge to the Post entity.
func (dtc *DailyTaskCreate) SetPost(p *Post) *DailyTaskCreate {
	return dtc.SetPostID(p.ID)
}

// Mutation returns the DailyTaskMutation object of the builder.
func (dtc *DailyTaskCreate) Mutation() *DailyTaskMutation {
	return dtc.mutation
}

// Save creates the DailyTask in the database.
func (dtc *DailyTaskCreate) Save(ctx context.Context) (*DailyTask, error) {
	dtc.defaults()
	return withHooks(ctx, dtc.sqlSave, dtc.mutation, dtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DailyTaskCreate) SaveX(ctx context.Context) *DailyTask {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtc *DailyTaskCreate) Exec(ctx context.Context) error {
	_, err := dtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtc *DailyTaskCreate) ExecX(ctx context.Context) {
	if err := dtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtc *DailyTaskCreate) defaults() {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		v := dailytask.DefaultCreatedAt()
		dtc.mutation.SetCreatedAt(v)
	}
	if _, ok := dtc.mutation.ID(); !ok {
		v := dailytask.DefaultID()
		dtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DailyTaskCreate) check() error {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DailyTask.created_at"`)}
	}
	if _, ok := dtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "DailyTask.type"`)}
	}
	if len(dtc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "DailyTask.user"`)}
	}
	return nil
}

func (dtc *DailyTaskCreate) sqlSave(ctx context.Context) (*DailyTask, error) {
	if err := dtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dtc.mutation.id = &_node.ID
	dtc.mutation.done = true
	return _node, nil
}

func (dtc *DailyTaskCreate) createSpec() (*DailyTask, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyTask{config: dtc.config}
		_spec = sqlgraph.NewCreateSpec(dailytask.Table, sqlgraph.NewFieldSpec(dailytask.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dtc.conflict
	if id, ok := dtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dtc.mutation.CreatedAt(); ok {
		_spec.SetField(dailytask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dtc.mutation.GetType(); ok {
		_spec.SetField(dailytask.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := dtc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailytask.UserTable,
			Columns: []string{dailytask.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_daily_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dtc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dailytask.PostTable,
			Columns: []string{dailytask.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_daily_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DailyTask.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DailyTaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dtc *DailyTaskCreate) OnConflict(opts ...sql.ConflictOption) *DailyTaskUpsertOne {
	dtc.conflict = opts
	return &DailyTaskUpsertOne{
		create: dtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DailyTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dtc *DailyTaskCreate) OnConflictColumns(columns ...string) *DailyTaskUpsertOne {
	dtc.conflict = append(dtc.conflict, sql.ConflictColumns(columns...))
	return &DailyTaskUpsertOne{
		create: dtc,
	}
}

type (
	// DailyTaskUpsertOne is the builder for "upsert"-ing
	//  one DailyTask node.
	DailyTaskUpsertOne struct {
		create *DailyTaskCreate
	}

	// DailyTaskUpsert is the "OnConflict" setter.
	DailyTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DailyTaskUpsert) SetCreatedAt(v time.Time) *DailyTaskUpsert {
	u.Set(dailytask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DailyTaskUpsert) UpdateCreatedAt() *DailyTaskUpsert {
	u.SetExcluded(dailytask.FieldCreatedAt)
	return u
}

// SetType sets the "type" field.
func (u *DailyTaskUpsert) SetType(v enum.TaskType) *DailyTaskUpsert {
	u.Set(dailytask.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DailyTaskUpsert) UpdateType() *DailyTaskUpsert {
	u.SetExcluded(dailytask.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DailyTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dailytask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DailyTaskUpsertOne) UpdateNewValues() *DailyTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dailytask.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DailyTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DailyTaskUpsertOne) Ignore() *DailyTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DailyTaskUpsertOne) DoNothing() *DailyTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DailyTaskCreate.OnConflict
// documentation for more info.
func (u *DailyTaskUpsertOne) Update(set func(*DailyTaskUpsert)) *DailyTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DailyTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DailyTaskUpsertOne) SetCreatedAt(v time.Time) *DailyTaskUpsertOne {
	return u.Update(func(s *DailyTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DailyTaskUpsertOne) UpdateCreatedAt() *DailyTaskUpsertOne {
	return u.Update(func(s *DailyTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetType sets the "type" field.
func (u *DailyTaskUpsertOne) SetType(v enum.TaskType) *DailyTaskUpsertOne {
	return u.Update(func(s *DailyTaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DailyTaskUpsertOne) UpdateType() *DailyTaskUpsertOne {
	return u.Update(func(s *DailyTaskUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *DailyTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DailyTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DailyTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DailyTaskUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DailyTaskUpsertOne.ID is not supported by MySQL driver. Use DailyTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DailyTaskUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DailyTaskCreateBulk is the builder for creating many DailyTask entities in bulk.
type DailyTaskCreateBulk struct {
	config
	err      error
	builders []*DailyTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the DailyTask entities in the database.
func (dtcb *DailyTaskCreateBulk) Save(ctx context.Context) ([]*DailyTask, error) {
	if dtcb.err != nil {
		return nil, dtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DailyTask, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DailyTaskCreateBulk) SaveX(ctx context.Context) []*DailyTask {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtcb *DailyTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := dtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtcb *DailyTaskCreateBulk) ExecX(ctx context.Context) {
	if err := dtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DailyTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DailyTaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dtcb *DailyTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *DailyTaskUpsertBulk {
	dtcb.conflict = opts
	return &DailyTaskUpsertBulk{
		create: dtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DailyTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dtcb *DailyTaskCreateBulk) OnConflictColumns(columns ...string) *DailyTaskUpsertBulk {
	dtcb.conflict = append(dtcb.conflict, sql.ConflictColumns(columns...))
	return &DailyTaskUpsertBulk{
		create: dtcb,
	}
}

// DailyTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of DailyTask nodes.
type DailyTaskUpsertBulk struct {
	create *DailyTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DailyTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dailytask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DailyTaskUpsertBulk) UpdateNewValues() *DailyTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dailytask.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DailyTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DailyTaskUpsertBulk) Ignore() *DailyTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DailyTaskUpsertBulk) DoNothing() *DailyTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DailyTaskCreateBulk.OnConflict
// documentation for more info.
func (u *DailyTaskUpsertBulk) Update(set func(*DailyTaskUpsert)) *DailyTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DailyTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DailyTaskUpsertBulk) SetCreatedAt(v time.Time) *DailyTaskUpsertBulk {
	return u.Update(func(s *DailyTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DailyTaskUpsertBulk) UpdateCreatedAt() *DailyTaskUpsertBulk {
	return u.Update(func(s *DailyTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetType sets the "type" field.
func (u *DailyTaskUpsertBulk) SetType(v enum.TaskType) *DailyTaskUpsertBulk {
	return u.Update(func(s *DailyTaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DailyTaskUpsertBulk) UpdateType() *DailyTaskUpsertBulk {
	return u.Update(func(s *DailyTaskUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *DailyTaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DailyTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DailyTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DailyTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
