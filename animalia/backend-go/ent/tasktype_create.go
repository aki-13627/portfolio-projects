// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/enum"
	"github.com/aki-13627/animalia/backend-go/ent/tasktype"
	pgvector "github.com/pgvector/pgvector-go"
)

// TaskTypeCreate is the builder for creating a TaskType entity.
type TaskTypeCreate struct {
	config
	mutation *TaskTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (ttc *TaskTypeCreate) SetType(et enum.TaskType) *TaskTypeCreate {
	ttc.mutation.SetType(et)
	return ttc
}

// SetTextFeature sets the "text_feature" field.
func (ttc *TaskTypeCreate) SetTextFeature(pg pgvector.Vector) *TaskTypeCreate {
	ttc.mutation.SetTextFeature(pg)
	return ttc
}

// SetNillableTextFeature sets the "text_feature" field if the given value is not nil.
func (ttc *TaskTypeCreate) SetNillableTextFeature(pg *pgvector.Vector) *TaskTypeCreate {
	if pg != nil {
		ttc.SetTextFeature(*pg)
	}
	return ttc
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttc *TaskTypeCreate) Mutation() *TaskTypeMutation {
	return ttc.mutation
}

// Save creates the TaskType in the database.
func (ttc *TaskTypeCreate) Save(ctx context.Context) (*TaskType, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TaskTypeCreate) SaveX(ctx context.Context) *TaskType {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TaskTypeCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TaskTypeCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TaskTypeCreate) check() error {
	if _, ok := ttc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TaskType.type"`)}
	}
	return nil
}

func (ttc *TaskTypeCreate) sqlSave(ctx context.Context) (*TaskType, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TaskTypeCreate) createSpec() (*TaskType, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskType{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tasktype.Table, sqlgraph.NewFieldSpec(tasktype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ttc.conflict
	if value, ok := ttc.mutation.GetType(); ok {
		_spec.SetField(tasktype.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ttc.mutation.TextFeature(); ok {
		_spec.SetField(tasktype.FieldTextFeature, field.TypeOther, value)
		_node.TextFeature = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskType.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskTypeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ttc *TaskTypeCreate) OnConflict(opts ...sql.ConflictOption) *TaskTypeUpsertOne {
	ttc.conflict = opts
	return &TaskTypeUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttc *TaskTypeCreate) OnConflictColumns(columns ...string) *TaskTypeUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TaskTypeUpsertOne{
		create: ttc,
	}
}

type (
	// TaskTypeUpsertOne is the builder for "upsert"-ing
	//  one TaskType node.
	TaskTypeUpsertOne struct {
		create *TaskTypeCreate
	}

	// TaskTypeUpsert is the "OnConflict" setter.
	TaskTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *TaskTypeUpsert) SetType(v enum.TaskType) *TaskTypeUpsert {
	u.Set(tasktype.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskTypeUpsert) UpdateType() *TaskTypeUpsert {
	u.SetExcluded(tasktype.FieldType)
	return u
}

// SetTextFeature sets the "text_feature" field.
func (u *TaskTypeUpsert) SetTextFeature(v pgvector.Vector) *TaskTypeUpsert {
	u.Set(tasktype.FieldTextFeature, v)
	return u
}

// UpdateTextFeature sets the "text_feature" field to the value that was provided on create.
func (u *TaskTypeUpsert) UpdateTextFeature() *TaskTypeUpsert {
	u.SetExcluded(tasktype.FieldTextFeature)
	return u
}

// ClearTextFeature clears the value of the "text_feature" field.
func (u *TaskTypeUpsert) ClearTextFeature() *TaskTypeUpsert {
	u.SetNull(tasktype.FieldTextFeature)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TaskType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskTypeUpsertOne) UpdateNewValues() *TaskTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskTypeUpsertOne) Ignore() *TaskTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskTypeUpsertOne) DoNothing() *TaskTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskTypeCreate.OnConflict
// documentation for more info.
func (u *TaskTypeUpsertOne) Update(set func(*TaskTypeUpsert)) *TaskTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *TaskTypeUpsertOne) SetType(v enum.TaskType) *TaskTypeUpsertOne {
	return u.Update(func(s *TaskTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskTypeUpsertOne) UpdateType() *TaskTypeUpsertOne {
	return u.Update(func(s *TaskTypeUpsert) {
		s.UpdateType()
	})
}

// SetTextFeature sets the "text_feature" field.
func (u *TaskTypeUpsertOne) SetTextFeature(v pgvector.Vector) *TaskTypeUpsertOne {
	return u.Update(func(s *TaskTypeUpsert) {
		s.SetTextFeature(v)
	})
}

// UpdateTextFeature sets the "text_feature" field to the value that was provided on create.
func (u *TaskTypeUpsertOne) UpdateTextFeature() *TaskTypeUpsertOne {
	return u.Update(func(s *TaskTypeUpsert) {
		s.UpdateTextFeature()
	})
}

// ClearTextFeature clears the value of the "text_feature" field.
func (u *TaskTypeUpsertOne) ClearTextFeature() *TaskTypeUpsertOne {
	return u.Update(func(s *TaskTypeUpsert) {
		s.ClearTextFeature()
	})
}

// Exec executes the query.
func (u *TaskTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskTypeCreateBulk is the builder for creating many TaskType entities in bulk.
type TaskTypeCreateBulk struct {
	config
	err      error
	builders []*TaskTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskType entities in the database.
func (ttcb *TaskTypeCreateBulk) Save(ctx context.Context) ([]*TaskType, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TaskType, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TaskTypeCreateBulk) SaveX(ctx context.Context) []*TaskType {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TaskTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TaskTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskTypeUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ttcb *TaskTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskTypeUpsertBulk {
	ttcb.conflict = opts
	return &TaskTypeUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttcb *TaskTypeCreateBulk) OnConflictColumns(columns ...string) *TaskTypeUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TaskTypeUpsertBulk{
		create: ttcb,
	}
}

// TaskTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskType nodes.
type TaskTypeUpsertBulk struct {
	create *TaskTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskTypeUpsertBulk) UpdateNewValues() *TaskTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskTypeUpsertBulk) Ignore() *TaskTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskTypeUpsertBulk) DoNothing() *TaskTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskTypeCreateBulk.OnConflict
// documentation for more info.
func (u *TaskTypeUpsertBulk) Update(set func(*TaskTypeUpsert)) *TaskTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *TaskTypeUpsertBulk) SetType(v enum.TaskType) *TaskTypeUpsertBulk {
	return u.Update(func(s *TaskTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskTypeUpsertBulk) UpdateType() *TaskTypeUpsertBulk {
	return u.Update(func(s *TaskTypeUpsert) {
		s.UpdateType()
	})
}

// SetTextFeature sets the "text_feature" field.
func (u *TaskTypeUpsertBulk) SetTextFeature(v pgvector.Vector) *TaskTypeUpsertBulk {
	return u.Update(func(s *TaskTypeUpsert) {
		s.SetTextFeature(v)
	})
}

// UpdateTextFeature sets the "text_feature" field to the value that was provided on create.
func (u *TaskTypeUpsertBulk) UpdateTextFeature() *TaskTypeUpsertBulk {
	return u.Update(func(s *TaskTypeUpsert) {
		s.UpdateTextFeature()
	})
}

// ClearTextFeature clears the value of the "text_feature" field.
func (u *TaskTypeUpsertBulk) ClearTextFeature() *TaskTypeUpsertBulk {
	return u.Update(func(s *TaskTypeUpsert) {
		s.ClearTextFeature()
	})
}

// Exec executes the query.
func (u *TaskTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
