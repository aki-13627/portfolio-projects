// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/aki-13627/animalia/backend-go/ent/followrelation"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// FollowRelation is the model entity for the FollowRelation schema.
type FollowRelation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FollowRelationQuery when eager-loading is set.
	Edges          FollowRelationEdges `json:"edges"`
	user_following *uuid.UUID
	user_followers *uuid.UUID
	selectValues   sql.SelectValues
}

// FollowRelationEdges holds the relations/edges for other nodes in the graph.
type FollowRelationEdges struct {
	// From holds the value of the from edge.
	From *User `json:"from,omitempty"`
	// To holds the value of the to edge.
	To *User `json:"to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowRelationEdges) FromOrErr() (*User, error) {
	if e.From != nil {
		return e.From, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "from"}
}

// ToOrErr returns the To value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowRelationEdges) ToOrErr() (*User, error) {
	if e.To != nil {
		return e.To, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FollowRelation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case followrelation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case followrelation.FieldID:
			values[i] = new(uuid.UUID)
		case followrelation.ForeignKeys[0]: // user_following
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case followrelation.ForeignKeys[1]: // user_followers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FollowRelation fields.
func (fr *FollowRelation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case followrelation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fr.ID = *value
			}
		case followrelation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fr.CreatedAt = value.Time
			}
		case followrelation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_following", values[i])
			} else if value.Valid {
				fr.user_following = new(uuid.UUID)
				*fr.user_following = *value.S.(*uuid.UUID)
			}
		case followrelation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_followers", values[i])
			} else if value.Valid {
				fr.user_followers = new(uuid.UUID)
				*fr.user_followers = *value.S.(*uuid.UUID)
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FollowRelation.
// This includes values selected through modifiers, order, etc.
func (fr *FollowRelation) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// QueryFrom queries the "from" edge of the FollowRelation entity.
func (fr *FollowRelation) QueryFrom() *UserQuery {
	return NewFollowRelationClient(fr.config).QueryFrom(fr)
}

// QueryTo queries the "to" edge of the FollowRelation entity.
func (fr *FollowRelation) QueryTo() *UserQuery {
	return NewFollowRelationClient(fr.config).QueryTo(fr)
}

// Update returns a builder for updating this FollowRelation.
// Note that you need to call FollowRelation.Unwrap() before calling this method if this FollowRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FollowRelation) Update() *FollowRelationUpdateOne {
	return NewFollowRelationClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the FollowRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FollowRelation) Unwrap() *FollowRelation {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FollowRelation is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FollowRelation) String() string {
	var builder strings.Builder
	builder.WriteString("FollowRelation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FollowRelations is a parsable slice of FollowRelation.
type FollowRelations []*FollowRelation
