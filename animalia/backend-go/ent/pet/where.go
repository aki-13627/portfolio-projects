// Code generated by ent, DO NOT EDIT.

package pet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldName, v))
}

// BirthDay applies equality check predicate on the "birth_day" field. It's identical to BirthDayEQ.
func BirthDay(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBirthDay, v))
}

// ImageKey applies equality check predicate on the "image_key" field. It's identical to ImageKeyEQ.
func ImageKey(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldImageKey, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldDeletedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldName, v))
}

// BirthDayEQ applies the EQ predicate on the "birth_day" field.
func BirthDayEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBirthDay, v))
}

// BirthDayNEQ applies the NEQ predicate on the "birth_day" field.
func BirthDayNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldBirthDay, v))
}

// BirthDayIn applies the In predicate on the "birth_day" field.
func BirthDayIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldBirthDay, vs...))
}

// BirthDayNotIn applies the NotIn predicate on the "birth_day" field.
func BirthDayNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldBirthDay, vs...))
}

// BirthDayGT applies the GT predicate on the "birth_day" field.
func BirthDayGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldBirthDay, v))
}

// BirthDayGTE applies the GTE predicate on the "birth_day" field.
func BirthDayGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldBirthDay, v))
}

// BirthDayLT applies the LT predicate on the "birth_day" field.
func BirthDayLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldBirthDay, v))
}

// BirthDayLTE applies the LTE predicate on the "birth_day" field.
func BirthDayLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldBirthDay, v))
}

// BirthDayContains applies the Contains predicate on the "birth_day" field.
func BirthDayContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldBirthDay, v))
}

// BirthDayHasPrefix applies the HasPrefix predicate on the "birth_day" field.
func BirthDayHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldBirthDay, v))
}

// BirthDayHasSuffix applies the HasSuffix predicate on the "birth_day" field.
func BirthDayHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldBirthDay, v))
}

// BirthDayEqualFold applies the EqualFold predicate on the "birth_day" field.
func BirthDayEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldBirthDay, v))
}

// BirthDayContainsFold applies the ContainsFold predicate on the "birth_day" field.
func BirthDayContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldBirthDay, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldType, vs...))
}

// SpeciesEQ applies the EQ predicate on the "species" field.
func SpeciesEQ(v Species) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSpecies, v))
}

// SpeciesNEQ applies the NEQ predicate on the "species" field.
func SpeciesNEQ(v Species) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldSpecies, v))
}

// SpeciesIn applies the In predicate on the "species" field.
func SpeciesIn(vs ...Species) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldSpecies, vs...))
}

// SpeciesNotIn applies the NotIn predicate on the "species" field.
func SpeciesNotIn(vs ...Species) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldSpecies, vs...))
}

// ImageKeyEQ applies the EQ predicate on the "image_key" field.
func ImageKeyEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldImageKey, v))
}

// ImageKeyNEQ applies the NEQ predicate on the "image_key" field.
func ImageKeyNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldImageKey, v))
}

// ImageKeyIn applies the In predicate on the "image_key" field.
func ImageKeyIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldImageKey, vs...))
}

// ImageKeyNotIn applies the NotIn predicate on the "image_key" field.
func ImageKeyNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldImageKey, vs...))
}

// ImageKeyGT applies the GT predicate on the "image_key" field.
func ImageKeyGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldImageKey, v))
}

// ImageKeyGTE applies the GTE predicate on the "image_key" field.
func ImageKeyGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldImageKey, v))
}

// ImageKeyLT applies the LT predicate on the "image_key" field.
func ImageKeyLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldImageKey, v))
}

// ImageKeyLTE applies the LTE predicate on the "image_key" field.
func ImageKeyLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldImageKey, v))
}

// ImageKeyContains applies the Contains predicate on the "image_key" field.
func ImageKeyContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldImageKey, v))
}

// ImageKeyHasPrefix applies the HasPrefix predicate on the "image_key" field.
func ImageKeyHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldImageKey, v))
}

// ImageKeyHasSuffix applies the HasSuffix predicate on the "image_key" field.
func ImageKeyHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldImageKey, v))
}

// ImageKeyEqualFold applies the EqualFold predicate on the "image_key" field.
func ImageKeyEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldImageKey, v))
}

// ImageKeyContainsFold applies the ContainsFold predicate on the "image_key" field.
func ImageKeyContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldImageKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Pet {
	return predicate.Pet(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Pet {
	return predicate.Pet(sql.FieldNotNull(FieldDeletedAt))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.NotPredicates(p))
}
