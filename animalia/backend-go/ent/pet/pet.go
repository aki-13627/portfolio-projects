// Code generated by ent, DO NOT EDIT.

package pet

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the pet type in the database.
	Label = "pet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBirthDay holds the string denoting the birth_day field in the database.
	FieldBirthDay = "birth_day"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSpecies holds the string denoting the species field in the database.
	FieldSpecies = "species"
	// FieldImageKey holds the string denoting the image_key field in the database.
	FieldImageKey = "image_key"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the pet in the database.
	Table = "pets"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "pets"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_pets"
)

// Columns holds all SQL columns for pet fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldBirthDay,
	FieldType,
	FieldSpecies,
	FieldImageKey,
	FieldCreatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_pets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// BirthDayValidator is a validator for the "birth_day" field. It is called by the builders before save.
	BirthDayValidator func(string) error
	// ImageKeyValidator is a validator for the "image_key" field. It is called by the builders before save.
	ImageKeyValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDog Type = "dog"
	TypeCat Type = "cat"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDog, TypeCat:
		return nil
	default:
		return fmt.Errorf("pet: invalid enum value for type field: %q", _type)
	}
}

// Species defines the type for the "species" enum field.
type Species string

// Species values.
const (
	SpeciesLabrador                     Species = "labrador"
	SpeciesPoodle                       Species = "poodle"
	SpeciesGermanShepherd               Species = "german_shepherd"
	SpeciesIrishWolfhound               Species = "irish_wolfhound"
	SpeciesIrishSetter                  Species = "irish_setter"
	SpeciesAfghanHound                  Species = "afghan_hound"
	SpeciesAmericanCockerSpaniel        Species = "american_cocker_spaniel"
	SpeciesAmericanStaffordshireTerrier Species = "american_staffordshire_terrier"
	SpeciesEnglishCockerSpaniel         Species = "english_cocker_spaniel"
	SpeciesEnglishSpringerSpaniel       Species = "english_springer_spaniel"
	SpeciesWestHighlandWhiteTerrier     Species = "west_highland_white_terrier"
	SpeciesWelshCorgiPembroke           Species = "welsh_corgi_pembroke"
	SpeciesAiredaleTerrier              Species = "airedale_terrier"
	SpeciesAustralianShepherd           Species = "australian_shepherd"
	SpeciesKaiKen                       Species = "kai_ken"
	SpeciesCavalierKingCharlesSpaniel   Species = "cavalier_king_charles_spaniel"
	SpeciesGreatPyrenees                Species = "great_pyrenees"
	SpeciesKeeshond                     Species = "keeshond"
	SpeciesCairnTerrier                 Species = "cairn_terrier"
	SpeciesGoldenRetriever              Species = "golden_retriever"
	SpeciesSaluki                       Species = "saluki"
	SpeciesShihTzu                      Species = "shih_tzu"
	SpeciesShetlandSheepdog             Species = "shetland_sheepdog"
	SpeciesShibaInu                     Species = "shiba_inu"
	SpeciesSiberianHusky                Species = "siberian_husky"
	SpeciesJackRussellTerrier           Species = "jack_russell_terrier"
	SpeciesScottishTerrier              Species = "scottish_terrier"
	SpeciesStBernard                    Species = "st_bernard"
	SpeciesDachshund                    Species = "dachshund"
	SpeciesDalmatian                    Species = "dalmatian"
	SpeciesChineseCrestedDog            Species = "chinese_crested_dog"
	SpeciesChihuahua                    Species = "chihuahua"
	SpeciesDogoArgentino                Species = "dogo_argentino"
	SpeciesDoberman                     Species = "doberman"
	SpeciesJapaneseSpitz                Species = "japanese_spitz"
	SpeciesBerneseMountainDog           Species = "bernese_mountain_dog"
	SpeciesPug                          Species = "pug"
	SpeciesBassetHound                  Species = "basset_hound"
	SpeciesPapillon                     Species = "papillon"
	SpeciesBeardedCollie                Species = "bearded_collie"
	SpeciesBeagle                       Species = "beagle"
	SpeciesBichonFrise                  Species = "bichon_frise"
	SpeciesBouvierDesFlandres           Species = "bouvier_des_flandres"
	SpeciesFlatCoatedRetriever          Species = "flat_coated_retriever"
	SpeciesBullTerrier                  Species = "bull_terrier"
	SpeciesBulldog                      Species = "bulldog"
	SpeciesFrenchBulldog                Species = "french_bulldog"
	SpeciesPekinese                     Species = "pekinese"
	SpeciesBedlingtonTerrier            Species = "bedlington_terrier"
	SpeciesBelgianTervuren              Species = "belgian_tervuren"
	SpeciesBorderCollie                 Species = "border_collie"
	SpeciesBoxer                        Species = "boxer"
	SpeciesBostonTerrier                Species = "boston_terrier"
	SpeciesPomeranian                   Species = "pomeranian"
	SpeciesBorzoi                       Species = "borzoi"
	SpeciesMaltese                      Species = "maltese"
	SpeciesMiniatureSchnauzer           Species = "miniature_schnauzer"
	SpeciesMiniaturePincher             Species = "miniature_pincher"
	SpeciesYorkshireTerrier             Species = "yorkshire_terrier"
	SpeciesRoughCollie                  Species = "rough_collie"
	SpeciesLabradorRetriever            Species = "labrador_retriever"
	SpeciesRottweiler                   Species = "rottweiler"
	SpeciesWeimaraner                   Species = "weimaraner"
	SpeciesSiamese                      Species = "siamese"
	SpeciesPersian                      Species = "persian"
	SpeciesMaineCoon                    Species = "maine_coon"
	SpeciesAmericanCurl                 Species = "american_curl"
	SpeciesAmericanShorthair            Species = "american_shorthair"
	SpeciesEgyptianMau                  Species = "egyptian_mau"
	SpeciesCornishRex                   Species = "cornish_rex"
	SpeciesJapaneseBobtail              Species = "japanese_bobtail"
	SpeciesSingapura                    Species = "singapura"
	SpeciesScottishFold                 Species = "scottish_fold"
	SpeciesSomali                       Species = "somali"
	SpeciesTurkishAngora                Species = "turkish_angora"
	SpeciesTonkinese                    Species = "tonkinese"
	SpeciesNorwegianForestCat           Species = "norwegian_forest_cat"
	SpeciesBurmilla                     Species = "burmilla"
	SpeciesBritishShorthair             Species = "british_shorthair"
	SpeciesHouseholdPet                 Species = "household_pet"
	SpeciesBengal                       Species = "bengal"
	SpeciesMunchkin                     Species = "munchkin"
	SpeciesRagdoll                      Species = "ragdoll"
	SpeciesRussianBlue                  Species = "russian_blue"
)

func (s Species) String() string {
	return string(s)
}

// SpeciesValidator is a validator for the "species" field enum values. It is called by the builders before save.
func SpeciesValidator(s Species) error {
	switch s {
	case SpeciesLabrador, SpeciesPoodle, SpeciesGermanShepherd, SpeciesIrishWolfhound, SpeciesIrishSetter, SpeciesAfghanHound, SpeciesAmericanCockerSpaniel, SpeciesAmericanStaffordshireTerrier, SpeciesEnglishCockerSpaniel, SpeciesEnglishSpringerSpaniel, SpeciesWestHighlandWhiteTerrier, SpeciesWelshCorgiPembroke, SpeciesAiredaleTerrier, SpeciesAustralianShepherd, SpeciesKaiKen, SpeciesCavalierKingCharlesSpaniel, SpeciesGreatPyrenees, SpeciesKeeshond, SpeciesCairnTerrier, SpeciesGoldenRetriever, SpeciesSaluki, SpeciesShihTzu, SpeciesShetlandSheepdog, SpeciesShibaInu, SpeciesSiberianHusky, SpeciesJackRussellTerrier, SpeciesScottishTerrier, SpeciesStBernard, SpeciesDachshund, SpeciesDalmatian, SpeciesChineseCrestedDog, SpeciesChihuahua, SpeciesDogoArgentino, SpeciesDoberman, SpeciesJapaneseSpitz, SpeciesBerneseMountainDog, SpeciesPug, SpeciesBassetHound, SpeciesPapillon, SpeciesBeardedCollie, SpeciesBeagle, SpeciesBichonFrise, SpeciesBouvierDesFlandres, SpeciesFlatCoatedRetriever, SpeciesBullTerrier, SpeciesBulldog, SpeciesFrenchBulldog, SpeciesPekinese, SpeciesBedlingtonTerrier, SpeciesBelgianTervuren, SpeciesBorderCollie, SpeciesBoxer, SpeciesBostonTerrier, SpeciesPomeranian, SpeciesBorzoi, SpeciesMaltese, SpeciesMiniatureSchnauzer, SpeciesMiniaturePincher, SpeciesYorkshireTerrier, SpeciesRoughCollie, SpeciesLabradorRetriever, SpeciesRottweiler, SpeciesWeimaraner, SpeciesSiamese, SpeciesPersian, SpeciesMaineCoon, SpeciesAmericanCurl, SpeciesAmericanShorthair, SpeciesEgyptianMau, SpeciesCornishRex, SpeciesJapaneseBobtail, SpeciesSingapura, SpeciesScottishFold, SpeciesSomali, SpeciesTurkishAngora, SpeciesTonkinese, SpeciesNorwegianForestCat, SpeciesBurmilla, SpeciesBritishShorthair, SpeciesHouseholdPet, SpeciesBengal, SpeciesMunchkin, SpeciesRagdoll, SpeciesRussianBlue:
		return nil
	default:
		return fmt.Errorf("pet: invalid enum value for species field: %q", s)
	}
}

// OrderOption defines the ordering options for the Pet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBirthDay orders the results by the birth_day field.
func ByBirthDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDay, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySpecies orders the results by the species field.
func BySpecies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecies, opts...).ToFunc()
}

// ByImageKey orders the results by the image_key field.
func ByImageKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageKey, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
