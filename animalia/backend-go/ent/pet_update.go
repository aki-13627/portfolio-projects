// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/pet"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// Where appends a list predicates to the PetUpdate builder.
func (pu *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PetUpdate) SetName(s string) *PetUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PetUpdate) SetNillableName(s *string) *PetUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetBirthDay sets the "birth_day" field.
func (pu *PetUpdate) SetBirthDay(s string) *PetUpdate {
	pu.mutation.SetBirthDay(s)
	return pu
}

// SetNillableBirthDay sets the "birth_day" field if the given value is not nil.
func (pu *PetUpdate) SetNillableBirthDay(s *string) *PetUpdate {
	if s != nil {
		pu.SetBirthDay(*s)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *PetUpdate) SetType(pe pet.Type) *PetUpdate {
	pu.mutation.SetType(pe)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PetUpdate) SetNillableType(pe *pet.Type) *PetUpdate {
	if pe != nil {
		pu.SetType(*pe)
	}
	return pu
}

// SetSpecies sets the "species" field.
func (pu *PetUpdate) SetSpecies(pe pet.Species) *PetUpdate {
	pu.mutation.SetSpecies(pe)
	return pu
}

// SetNillableSpecies sets the "species" field if the given value is not nil.
func (pu *PetUpdate) SetNillableSpecies(pe *pet.Species) *PetUpdate {
	if pe != nil {
		pu.SetSpecies(*pe)
	}
	return pu
}

// SetImageKey sets the "image_key" field.
func (pu *PetUpdate) SetImageKey(s string) *PetUpdate {
	pu.mutation.SetImageKey(s)
	return pu
}

// SetNillableImageKey sets the "image_key" field if the given value is not nil.
func (pu *PetUpdate) SetNillableImageKey(s *string) *PetUpdate {
	if s != nil {
		pu.SetImageKey(*s)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PetUpdate) SetCreatedAt(t time.Time) *PetUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PetUpdate) SetNillableCreatedAt(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PetUpdate) SetDeletedAt(t time.Time) *PetUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PetUpdate) SetNillableDeletedAt(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PetUpdate) ClearDeletedAt() *PetUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pu *PetUpdate) SetOwnerID(id uuid.UUID) *PetUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *PetUpdate) SetOwner(u *User) *PetUpdate {
	return pu.SetOwnerID(u.ID)
}

// Mutation returns the PetMutation object of the builder.
func (pu *PetUpdate) Mutation() *PetMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *PetUpdate) ClearOwner() *PetUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PetUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pet.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.BirthDay(); ok {
		if err := pet.BirthDayValidator(v); err != nil {
			return &ValidationError{Name: "birth_day", err: fmt.Errorf(`ent: validator failed for field "Pet.birth_day": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := pet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pet.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Species(); ok {
		if err := pet.SpeciesValidator(v); err != nil {
			return &ValidationError{Name: "species", err: fmt.Errorf(`ent: validator failed for field "Pet.species": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ImageKey(); ok {
		if err := pet.ImageKeyValidator(v); err != nil {
			return &ValidationError{Name: "image_key", err: fmt.Errorf(`ent: validator failed for field "Pet.image_key": %w`, err)}
		}
	}
	if pu.mutation.OwnerCleared() && len(pu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pet.owner"`)
	}
	return nil
}

func (pu *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.BirthDay(); ok {
		_spec.SetField(pet.FieldBirthDay, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(pet.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Species(); ok {
		_spec.SetField(pet.FieldSpecies, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.ImageKey(); ok {
		_spec.SetField(pet.FieldImageKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(pet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(pet.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(pet.FieldDeletedAt, field.TypeTime)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetMutation
}

// SetName sets the "name" field.
func (puo *PetUpdateOne) SetName(s string) *PetUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableName(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetBirthDay sets the "birth_day" field.
func (puo *PetUpdateOne) SetBirthDay(s string) *PetUpdateOne {
	puo.mutation.SetBirthDay(s)
	return puo
}

// SetNillableBirthDay sets the "birth_day" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableBirthDay(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetBirthDay(*s)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *PetUpdateOne) SetType(pe pet.Type) *PetUpdateOne {
	puo.mutation.SetType(pe)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableType(pe *pet.Type) *PetUpdateOne {
	if pe != nil {
		puo.SetType(*pe)
	}
	return puo
}

// SetSpecies sets the "species" field.
func (puo *PetUpdateOne) SetSpecies(pe pet.Species) *PetUpdateOne {
	puo.mutation.SetSpecies(pe)
	return puo
}

// SetNillableSpecies sets the "species" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableSpecies(pe *pet.Species) *PetUpdateOne {
	if pe != nil {
		puo.SetSpecies(*pe)
	}
	return puo
}

// SetImageKey sets the "image_key" field.
func (puo *PetUpdateOne) SetImageKey(s string) *PetUpdateOne {
	puo.mutation.SetImageKey(s)
	return puo
}

// SetNillableImageKey sets the "image_key" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableImageKey(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetImageKey(*s)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PetUpdateOne) SetCreatedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableCreatedAt(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PetUpdateOne) SetDeletedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableDeletedAt(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PetUpdateOne) ClearDeletedAt() *PetUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (puo *PetUpdateOne) SetOwnerID(id uuid.UUID) *PetUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *PetUpdateOne) SetOwner(u *User) *PetUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// Mutation returns the PetMutation object of the builder.
func (puo *PetUpdateOne) Mutation() *PetMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *PetUpdateOne) ClearOwner() *PetUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// Where appends a list predicates to the PetUpdate builder.
func (puo *PetUpdateOne) Where(ps ...predicate.Pet) *PetUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PetUpdateOne) Select(field string, fields ...string) *PetUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pet entity.
func (puo *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PetUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pet.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.BirthDay(); ok {
		if err := pet.BirthDayValidator(v); err != nil {
			return &ValidationError{Name: "birth_day", err: fmt.Errorf(`ent: validator failed for field "Pet.birth_day": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := pet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pet.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Species(); ok {
		if err := pet.SpeciesValidator(v); err != nil {
			return &ValidationError{Name: "species", err: fmt.Errorf(`ent: validator failed for field "Pet.species": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ImageKey(); ok {
		if err := pet.ImageKeyValidator(v); err != nil {
			return &ValidationError{Name: "image_key", err: fmt.Errorf(`ent: validator failed for field "Pet.image_key": %w`, err)}
		}
	}
	if puo.mutation.OwnerCleared() && len(puo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pet.owner"`)
	}
	return nil
}

func (puo *PetUpdateOne) sqlSave(ctx context.Context) (_node *Pet, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pet.FieldID)
		for _, f := range fields {
			if !pet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.BirthDay(); ok {
		_spec.SetField(pet.FieldBirthDay, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(pet.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Species(); ok {
		_spec.SetField(pet.FieldSpecies, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.ImageKey(); ok {
		_spec.SetField(pet.FieldImageKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(pet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(pet.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(pet.FieldDeletedAt, field.TypeTime)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
