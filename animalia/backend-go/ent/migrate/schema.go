// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "content", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "post_comments", Type: field.TypeUUID},
		{Name: "user_comments", Type: field.TypeUUID},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_posts_comments",
				Columns:    []*schema.Column{CommentsColumns[3]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DailyTasksColumns holds the columns for the "daily_tasks" table.
	DailyTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString},
		{Name: "post_daily_task", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "user_daily_tasks", Type: field.TypeUUID},
	}
	// DailyTasksTable holds the schema information for the "daily_tasks" table.
	DailyTasksTable = &schema.Table{
		Name:       "daily_tasks",
		Columns:    DailyTasksColumns,
		PrimaryKey: []*schema.Column{DailyTasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "daily_tasks_posts_daily_task",
				Columns:    []*schema.Column{DailyTasksColumns[3]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "daily_tasks_users_daily_tasks",
				Columns:    []*schema.Column{DailyTasksColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FollowRelationsColumns holds the columns for the "follow_relations" table.
	FollowRelationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_following", Type: field.TypeUUID},
		{Name: "user_followers", Type: field.TypeUUID},
	}
	// FollowRelationsTable holds the schema information for the "follow_relations" table.
	FollowRelationsTable = &schema.Table{
		Name:       "follow_relations",
		Columns:    FollowRelationsColumns,
		PrimaryKey: []*schema.Column{FollowRelationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "follow_relations_users_following",
				Columns:    []*schema.Column{FollowRelationsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "follow_relations_users_followers",
				Columns:    []*schema.Column{FollowRelationsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "followrelation_user_following_user_followers",
				Unique:  true,
				Columns: []*schema.Column{FollowRelationsColumns[2], FollowRelationsColumns[3]},
			},
		},
	}
	// LikesColumns holds the columns for the "likes" table.
	LikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "post_likes", Type: field.TypeUUID},
		{Name: "user_likes", Type: field.TypeUUID},
	}
	// LikesTable holds the schema information for the "likes" table.
	LikesTable = &schema.Table{
		Name:       "likes",
		Columns:    LikesColumns,
		PrimaryKey: []*schema.Column{LikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "likes_posts_likes",
				Columns:    []*schema.Column{LikesColumns[2]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "likes_users_likes",
				Columns:    []*schema.Column{LikesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "like_user_likes_post_likes",
				Unique:  true,
				Columns: []*schema.Column{LikesColumns[3], LikesColumns[2]},
			},
		},
	}
	// PetsColumns holds the columns for the "pets" table.
	PetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "birth_day", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"dog", "cat"}},
		{Name: "species", Type: field.TypeEnum, Enums: []string{"labrador", "poodle", "german_shepherd", "irish_wolfhound", "irish_setter", "afghan_hound", "american_cocker_spaniel", "american_staffordshire_terrier", "english_cocker_spaniel", "english_springer_spaniel", "west_highland_white_terrier", "welsh_corgi_pembroke", "airedale_terrier", "australian_shepherd", "kai_ken", "cavalier_king_charles_spaniel", "great_pyrenees", "keeshond", "cairn_terrier", "golden_retriever", "saluki", "shih_tzu", "shetland_sheepdog", "shiba_inu", "siberian_husky", "jack_russell_terrier", "scottish_terrier", "st_bernard", "dachshund", "dalmatian", "chinese_crested_dog", "chihuahua", "dogo_argentino", "doberman", "japanese_spitz", "bernese_mountain_dog", "pug", "basset_hound", "papillon", "bearded_collie", "beagle", "bichon_frise", "bouvier_des_flandres", "flat_coated_retriever", "bull_terrier", "bulldog", "french_bulldog", "pekinese", "bedlington_terrier", "belgian_tervuren", "border_collie", "boxer", "boston_terrier", "pomeranian", "borzoi", "maltese", "miniature_schnauzer", "miniature_pincher", "yorkshire_terrier", "rough_collie", "labrador_retriever", "rottweiler", "weimaraner", "siamese", "persian", "maine_coon", "american_curl", "american_shorthair", "egyptian_mau", "cornish_rex", "japanese_bobtail", "singapura", "scottish_fold", "somali", "turkish_angora", "tonkinese", "norwegian_forest_cat", "burmilla", "british_shorthair", "household_pet", "bengal", "munchkin", "ragdoll", "russian_blue"}},
		{Name: "image_key", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_pets", Type: field.TypeUUID},
	}
	// PetsTable holds the schema information for the "pets" table.
	PetsTable = &schema.Table{
		Name:       "pets",
		Columns:    PetsColumns,
		PrimaryKey: []*schema.Column{PetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pets_users_pets",
				Columns:    []*schema.Column{PetsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "index", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "caption", Type: field.TypeString},
		{Name: "image_key", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "image_feature", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "vector(768)"}},
		{Name: "user_posts", Type: field.TypeUUID},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TaskTypesColumns holds the columns for the "task_types" table.
	TaskTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "text_feature", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "vector(768)"}},
	}
	// TaskTypesTable holds the schema information for the "task_types" table.
	TaskTypesTable = &schema.Table{
		Name:       "task_types",
		Columns:    TaskTypesColumns,
		PrimaryKey: []*schema.Column{TaskTypesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "index", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "bio", Type: field.TypeString, Default: ""},
		{Name: "icon_image_key", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommentsTable,
		DailyTasksTable,
		FollowRelationsTable,
		LikesTable,
		PetsTable,
		PostsTable,
		TaskTypesTable,
		UsersTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = PostsTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	DailyTasksTable.ForeignKeys[0].RefTable = PostsTable
	DailyTasksTable.ForeignKeys[1].RefTable = UsersTable
	FollowRelationsTable.ForeignKeys[0].RefTable = UsersTable
	FollowRelationsTable.ForeignKeys[1].RefTable = UsersTable
	LikesTable.ForeignKeys[0].RefTable = PostsTable
	LikesTable.ForeignKeys[1].RefTable = UsersTable
	PetsTable.ForeignKeys[0].RefTable = UsersTable
	PostsTable.ForeignKeys[0].RefTable = UsersTable
}
